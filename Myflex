#include <stdio.h>
#include <malloc.h>
#include <stdbool.h>

FILE* input;
FILE* output;
FILE* long_debug;

typedef struct my_set
{
  int size;
  int *array;
} set;

void push_into_set(set *s, int x)
{
  if (s->array == NULL)
    s->size = 0;

  int i;
  for (i = 0; i < s->size; i++)
      if (s->array[i] == x)
	return;
  
  s->size++;
  s->array = (int*)realloc(s->array, s->size * sizeof(int));
  s->array[s->size - 1] = x;

  for (i = s->size - 1; i >= 1; i--)
      if (s->array[i] < s->array[i - 1])
	{
	  int temp = s->array[i];
	  s->array[i] = s->array[i - 1];
	  s->array[i - 1] = temp;
	}
      else
	  return;
}

void init_NFA(set ***NFA)
{
  *NFA = (set**)malloc(8 * sizeof(set)); 
 
  int i;
  for (i = 0; i < 8; i++)
    (*NFA)[i] = (set*)malloc(256 * sizeof(set));
  
  int m;
  fscanf(input, "%d", &m);

  int a, b;
  char c1, c2;
  for (i = 0; i < m; i++)
   {
     fscanf(input, "%d%d%c%c", &a, &b, &c1, &c2);
     push_into_set(&(*NFA)[a][c2], b);
   }
}

void init_DFA(int ***DFA)
{
  *DFA = (int**)malloc(1 * sizeof(int));
  (*DFA)[0] = (int*)malloc(256 * sizeof(int));
}

void print(int **DFA, int DFA_size)
{
  int i, j;
  for (i = 0; i < DFA_size; i++)
    {
      for (j = 0; j < 256; j++)
	{
	  if (DFA[i][j] == NULL)
	    fprintf(output, "0 ");
	  else
	    fprintf(output, "%d ", DFA[i][j]);

	  if (j % 10 == 0)
	    fprintf(output, "\n");
	}
      fprintf(output, "\n");
    }
}

set copy(set s)
{
  return s;
}

bool equal(set s1, set s2)
{
  int i;
  if (s1.size != s2.size)
    return false;
  else
    for (i = 0; i < s1.size; i++)
      if (s1.array[i] != s2.array[i])
	return false;

  return true;
}

int main()
{
  input = fopen("input.txt", "r");
  output = fopen("output.txt", "w");
  long_debug = fopen("long_debug.txt", "w");

  set **NFA;
  init_NFA(&NFA);
  
  int **DFA;
  init_DFA(&DFA);
  
  set *queue;
  queue = (set*)malloc(1 * sizeof(set));
  push_into_set(&queue[0], 0);
  int cnt_of_states = 1;
  
  int i = 0, j, k, l, state;
  set collect;

  while (i < cnt_of_states)
    {
      for (j = 0; j < 256; j++)
	{
	  collect.size = 0;
	  collect.array = NULL;
	  state = -1;

	  for (k = 0; k < queue[i].size; k++)
	      for (l = 0; l < NFA[queue[i].array[k]][j].size; l++)
		push_into_set(&collect, NFA[queue[i].array[k]][j].array[l]);


	  for (k = 0; k < cnt_of_states; k++)
	    if (equal(collect, queue[k]))
		{
		  state = k;
		  break;
		}

	  if (collect.size != 0)
	    if (state == -1)
	      {     
		cnt_of_states++;

		queue = (set*)realloc(queue, cnt_of_states * sizeof(set));
		for (k = 0; k < collect.size; k++)
		    push_into_set(&queue[cnt_of_states - 1], collect.array[k]);     

		DFA = (int**)realloc(DFA, cnt_of_states * sizeof(int*));
		DFA[cnt_of_states - 1] = (int*)malloc(256 * sizeof(int));
		DFA[i][j] = cnt_of_states - 1;		
	      }
	    else
	      {
		DFA[i][j] = state;
	      }
	  free(collect.array);
	}
      i++;
    }

  print(DFA, cnt_of_states);

  fclose(input);
  fclose(output);

  return 0;
}
